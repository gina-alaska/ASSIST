/*
# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
*/

var latDMSRegex = /^(\+|-)?[0-9]{1,2}\.[0-9]{2}(\.[0-9]{2})?\s?[NS]?$/;
var lonDMSRegex = /^(\+|-)?[0-9]{1,3}\.[0-9]{2}(\.[0-9]{2})?\s?[EW]?$/;

$(document).ready(function() {

  var $userForm = $('#user_form');
  var $obsForm = $('#observation_form');
  var $photoForm = $('#photo_form');
  $obsForm.tabs({
    show: function(event, ui) {
      $(ui.panel).find('.combobox:visible').chosen();
      $(ui.panel).find('.users').chosen({
        no_results_text: "That user was not found."
      });
    }
  });
  $("#nav_buttons").buttonset();
  $(".photo_locations").buttonset();
  $("#ice_obs_buttons").buttonset();
  $(".radioset").buttonset();
  $("#adduser").button({
    icons: {
      primary: 'ui-icon-plusthick'
    }
  });



  $(".ridges").hide();
  $(".ice_obs").hide();


  $userForm.dialog({
    modal: true,
    autoOpen: false,
    resizable: false,
    minWidth: 400,
    minHeight: 200
  });

  $("#ice_obs_buttons input").click( function() {
    var target = $(this).attr('value');
    $("#ice .selected").hide().removeClass('selected');
    $(target).addClass('selected').show(0, function() {
      $(this).find('.combobox').chosen();
      $(this).find('.topography').chosen().change( handleTopographies ).removeClass("topography");
    });
  });

  $("#adduser").click( function() {
    $userForm.dialog("open");
    return false;
  });

  $("#save_button").click( function(event) {
    var form = $(".ui-tabs-panel form:visible");
    $.rails.handleRemote( $(form) );
    event.preventDefault();
  });
  $("#nav_buttons #next_button").click( function(event) {

    event.preventDefault();
    var $panel = $("#observation_form");
    var tab = $panel.tabs('option', "selected");
    $panel.tabs('option', 'selected', tab + 1 );
  });

  $userForm.bind("ajax:error", function( e, xhr, status ) {
    var $form = $(this);
    var errors;
    var errorText = "";
    try {
      errors = $.parseJSON(xhr.responseText)
    } catch(err) {
      errors = { message: "Please reload the page and try again" }
    }

    for( error in errors ) {
      errorText += "<div class=\"error\">"+ error + ": " + errors[error] + "</div>"
    }
    $form.find('div.errors').html(errorText);
  });
  $userForm.bind("ajax:success", function(evt, data, status, xhr) {
    var $form = $(this);
    var d = $.parseJSON(data);

    $('select.users').each( function(index, item) {
      $(item).append(new Option(d.firstname + " " + d.lastname, d.id));
    });
    $("#observation_primary_observer_id option:selected").removeAttr("selected");
    $("#observation_primary_observer_id option[value='"+d.id+"']").attr("selected", true);
    $('select.users').chosen().trigger("liszt:updated");

    $userForm.dialog('close');
  });

  $("form.notify").bind("ajax:beforeSend", function(e) {
    $(".field_with_errors").removeClass("field_with_errors");
    $.growlUI("", "Saving");
  });
  $("form.notify").bind("ajax:error", function(evt, xhr, status, error) {
    var errors = $.parseJSON(xhr.responseText);
    console.log(errors);
    var msg = [];
    $.each(errors, function( key, values) {
      $("."+key).addClass("field_with_errors");
      msg += key + ": " + values[0] + "<br />";
    });
    $.growlUI("Errors", msg);
  });
  $("form.notify").bind("ajax:success", function(evt, data, status, xhr) {
    $.growlUI("","Save Successful");
  });
  $("#comments_form").bind("ajax:success", appendComment );

  $photoForm.fileupload({
    dataType: 'json',
    url: $photoForm.attr('action'),
    add: function(e, data) {
      $(this).block({
        message: "Please Wait..."
      });
      data.submit();
    },
    done: appendPhoto,
    error: uploadPhotoError
  });

 $(document).delegate('.delete_photo form input[type="submit"]', "click", function() {

   $(this).parents(".attached_photo").block({
     message: "Deleting"
   });

   return true;
 });
  $(document).delegate(".delete_photo form", "ajax:success", removePhoto);
  $(document).delegate(".photo_locations input", "click", updatePhotoLocation)
});


function appendPhoto(e, data) {
  var r = data.result;
  var url = "/observations/" + r.observation_id + "/photos/" + r.id;
  var photo = $.get( url, function(data) {
      $("#attached_photos").append(data);
      $(".photo_locations").buttonset();
  });
  $("#photo_form").unblock();
}

function appendComment(e, data) {
  var url = "/observations/" + data.observation_id + "/comments/" + data.id;
  var comment = $.get( url, function(data) {
    $("#obs_comments").append(data);
  });
  $("#comments_form textarea").val("");
}


function uploadPhotoError(jqXHR, textStatus, error) {

  var msg = $.parseJSON(jqXHR.responseText);
  $.each(msg, function(index, value) {
    $.growlUI(value);
  });
  $("#photo_form").unblock();
}

function removePhoto() {
  $(this).parents(".attached_photo").remove();
  $.growlUI('', "Photo deleted");
}

function updatePhotoLocation() {
  var form = $(this).parents('form');
  var url =$(form).attr('action');
  $.post( url, $(form).serialize(), function() {
    $.growlUI(('', 'Saved'))
  });

}

function handleTopographies( ) {
  var fields = $(this).parents("fieldset");
  var value = parseInt($(this).val());

  if(<%= TopographyLookup.where("code >= 400 AND code < 500").pluck(:id) %>.indexOf(value) >= 0 )  {
    $(fields).find(".ridges").hide();
    $(fields).find(".ridges:not(.rafts) input").val('').removeAttr("selected").removeAttr("checked");
    $(fields).find(".ridges label").removeClass("ui-state-active");
    $(fields).find(".rafts").show();
  } else if(<%= TopographyLookup.where("code >= 500 AND code < 600").pluck(:id) %>.indexOf(value) >= 0 ) {
    $(fields).find(".ridges").show();
  } else {
    $(fields).find(".ridges").hide();
    $(fields).find(".ridges input").val('').removeAttr("selected").removeAttr("checked");
    $(fields).find(".ridges label").removeClass("ui-state-active");
    $(fields).find(".ridges").val('');
  }
}